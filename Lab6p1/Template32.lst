Microsoft (R) Macro Assembler Version 12.00.21005.1	    03/08/16 13:25:00
Lab6.as						     Page 1 - 1


				;@Author:		John Lahut
				;@Date:			3/8/2016
				;@Project:		Lab6
				;@Filename:		Lab6p1.asm
				;@I/O:			All I/O are done via console
				;@Assumptions:	None



				title    Lab6.asm

				.386
				.model flat, stdcall	;Protected Mode

				;Declare named constants
 = 0000000A			 LF                equ 0Ah
 = 0000000D			 CR                equ 0Dh

				;FILL IN CODE for Procedure prototypes
				;External prototypes from the Irvine Library

				WriteInt proto
				WriteString proto
				Crlf proto
				ExitProcess proto, :dword


				.stack 100h

 00000000			.data
 00000000 54 68 65 20 76	      msg1 byte "The values in list using indirect addressing are:", LF, CR, 0
	   61 6C 75 65 73
	   20 69 6E 20 6C
	   69 73 74 20 75
	   73 69 6E 67 20
	   69 6E 64 69 72
	   65 63 74 20 61
	   64 64 72 65 73
	   73 69 6E 67 20
	   61 72 65 3A 0A
	   0D 00
 00000034 54 68 65 20 76	      msg2 byte "The values in list using indexed addressing are:", LF, CR, 0
	   61 6C 75 65 73
	   20 69 6E 20 6C
	   69 73 74 20 75
	   73 69 6E 67 20
	   69 6E 64 65 78
	   65 64 20 61 64
	   64 72 65 73 73
	   69 6E 67 20 61
	   72 65 3A 0A 0D
	   00
 00000067 0000000F		      list sdword  15, -8, 25, -40, 50, 35, -48, 17, -80, 2, 18, -30
	   FFFFFFF8
	   00000019
	   FFFFFFD8
	   00000032
	   00000023
	   FFFFFFD0
	   00000011
	   FFFFFFB0
	   00000002
	   00000012
	   FFFFFFE2

						
 00000000			.code


 00000000			main proc
				      ;FILL IN CODE that prints
				      ;  "The values in list using indirect addressing are:"
 00000000  BA 00000000 R		  mov edx, offset msg1
 00000005  E8 00000000 E		  call WriteString


					  ;initialize registers
 0000000A  B8 00000000			  mov eax, 0
 0000000F  BB 00000000			  mov ebx, 0
 00000014  B9 00000000			  mov ecx, 0


				      ;FILL IN CODE using indirect addressing that prints the
				      ; values stored in list, one per line
 00000019  B9 0000000C			  mov ecx, LENGTHOF list	;LCV -- ecx reg gets the number of elements in the list
 0000001E  BB 00000067 R		  mov ebx, OFFSET list		;ebx reg gets the address of the starting element of the list

 00000023				  DO1:
 00000023  8B 03					mov eax, [ebx]		;eax contains the number to write to console...[ebx] command gets the value that at the address that ebx contains
 00000025  E8 00000000 E				call WriteInt		;Write the current integer to the console
 0000002A  E8 00000000 E				call Crlf			;Print blank line
 0000002F  83 C3 04					add ebx, TYPE list	;increment the ebx to point to the next element...need to get size(type) of element in list
 00000032  E2 EF					loop DO1


						

				      ;FILL IN CODE that prints
				      ;   "The values in list using indexed addressing are:"
 00000034  E8 00000000 E		  call Crlf					;Blank line
 00000039  BA 00000034 R		  mov edx, offset msg2		;edx must store beginning address of msg2
 0000003E  E8 00000000 E		  call WriteString			;print msg2


				      ;FILL IN CODE using indexed addressing that prints the values stored
				      ; in list, one per line
 00000043  B9 0000000C			  mov ecx, LENGTHOF list	;LCV -- ecx gets the number of elements in the list
 00000048  BE 00000000			  mov esi, 0				;esi stores the starting index

 0000004D				  DO2:
 0000004D  8B 86 00000067 R				mov eax, list[esi]	;eax gets list[value in esi]
 00000053  E8 00000000 E				call WriteInt		;Write current int to console
 00000058  E8 00000000 E				call Crlf			;Print black line
 0000005D  83 C6 04					add esi, TYPE list	;esi gets the next index in the list, size adjusted
 00000060  E2 EB					loop DO2			;loop back to the top of the loop


				      ;FILL IN CODE that terminates the program
 00000062  6A 00			  push 0
 00000064  E8 00000000 E		  call ExitProcess


 00000069			main endp

				end main
Microsoft (R) Macro Assembler Version 12.00.21005.1	    03/08/16 13:25:00
Lab6.as						     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00000100 DWord	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000097 DWord	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000069 DWord	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000069 Public STDCALL
  DO1  . . . . . . . . . . . . .	L Near	 00000023 _TEXT	
  DO2  . . . . . . . . . . . . .	L Near	 0000004D _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
CR . . . . . . . . . . . . . . .	Number	 0000000Dh   
LF . . . . . . . . . . . . . . .	Number	 0000000Ah   
list . . . . . . . . . . . . . .	DWord	 00000067 _DATA	
msg1 . . . . . . . . . . . . . .	Byte	 00000000 _DATA	
msg2 . . . . . . . . . . . . . .	Byte	 00000034 _DATA	

	   0 Warnings
	   0 Errors
